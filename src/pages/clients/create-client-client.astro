---
import Layout from '@layouts/Layout.astro';
---

<Layout title="Supabase Client Fetching">
	<main>
		<h1><span class="text-gradient">Supabase Client Fetching</span></h1>

		<p class="instructions">
			Client-side data fetching with <code>@supabase/ssr</code>
		</p>

		<div id="loadingIndicator" class="loading">Loading...</div>
		<ul id="countryList">
			<!-- Countries will be populated here -->
		</ul>

		<button id="fetchMoreBtn">Fetch More Countries</button>
	</main>
</Layout>

<script>
  import { supabase } from "@lib/supabase/client";

  const countryList = document.getElementById('countryList');
  const fetchMoreBtn = document.getElementById('fetchMoreBtn') as HTMLButtonElement;
  const loadingIndicator = document.getElementById('loadingIndicator');
  let currentCount = 0;

  function setLoading(isLoading: boolean) {
    if (loadingIndicator) {
      loadingIndicator.style.display = isLoading ? 'block' : 'none';
    }
    if (fetchMoreBtn) {
      fetchMoreBtn.disabled = isLoading;
    }
  }

  async function fetchCountries(start = 0, end = 4) {
    if (!countryList) {
      console.error("Country list element not found");
      return;
    }

    setLoading(true);

    try {
      const { data, error } = await supabase
        .from("countries")
        .select()
        .range(start, end);

      if (error) throw error;

      data.forEach(country => {
        const li = document.createElement('li');
        li.textContent = country.name;
        countryList.appendChild(li);
      });

      currentCount += data.length;
    } catch (error) {
      console.error("Error fetching countries:", error);
    } finally {
      setLoading(false);
    }
  }

  // Initial fetch
  fetchCountries();

  if (fetchMoreBtn) {
    fetchMoreBtn.addEventListener('click', () => {
      fetchCountries(currentCount, currentCount + 4);
    });
  } else {
    console.error("Fetch more button not found");
  }
</script>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
	#fetchMoreBtn {
		margin-top: 1rem;
		padding: 0.5rem 1rem;
		background-color: #4CAF50;
		color: white;
		border: none;
		cursor: pointer;
		font-size: 1rem;
	}
	#fetchMoreBtn:hover {
		background-color: #45a049;
	}
	#fetchMoreBtn:disabled {
		background-color: #cccccc;
		cursor: not-allowed;
	}
	.loading {
		font-style: italic;
		color: #FFFFFF;
	}
</style>